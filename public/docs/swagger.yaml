openapi: 3.0.0
info:
  title: News API
  version: "1.0.0"
  description: API for news and comments

paths:
  /api/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The provided credentials are incorrect."
        "422":
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The email field is required. (and 2 more errors)"
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        items:
                          type: string
                        example: ["The email field is required."]
                      password:
                        type: array
                        items:
                          type: string
                        example: ["The password field is required."]
                      device_name:
                        type: array
                        items:
                          type: string
                        example: ["The device name field is required."]
  /api/logout:
    post:
      summary: User logout
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"

  /api/refresh:
    post:
      summary: Refresh authentication token
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token refreshed successfully"
                  token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOi..."
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"

  /api/user:
    get:
      summary: Get user profile
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"

  /api/news:
    get:
      summary: Get all news
      tags:
        - News
      parameters:
        - name: page
          in: query
          required: false
          description: News page number
          schema:
            type: integer
      responses:
        "200":
          description: List of all news
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedNewsResponse"

  /api/news/{id}:
    get:
      summary: Get a specific news article
      tags:
        - News
      parameters:
        - name: id
          in: path
          required: true
          description: News ID
          schema:
            type: integer
      responses:
        "200":
          description: News details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/News"
        "404":
          description: News not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundError"

  /api/comments:
    get:
      summary: Get all comments
      tags:
        - Comments
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: user_id
          in: query
          description: Filter comments by user ID
          required: false
          schema:
            type: integer
            example: 1
        - name: news_id
          in: query
          description: Filter comments by news ID
          required: false
          schema:
            type: integer
            example: 1
        - name: body
          in: query
          description: Filter comments by body text (partial match)
          required: false
          schema:
            type: string
            example: "comment text"
        - name: user_email
          in: query
          description: Filter comments by user email (partial match)
          required: false
          schema:
            type: string
            format: email
            example: "user@example.com"
        - name: from_date
          in: query
          description: Filter comments created after this date and time
          required: false
          schema:
            type: string
            format: date-time
            example: "2024-01-01T00:00:00Z"
        - name: to_date
          in: query
          description: Filter comments created before this date
          required: false
          schema:
            type: string
            format: date
            example: "2024-12-31"
      responses:
        "200":
          description: List of comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                      last:
                        type: string
                      prev:
                        type: string
                      next:
                        type: string
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      from:
                        type: integer
                      last_page:
                        type: integer
                      path:
                        type: string
                      per_page:
                        type: integer
                      to:
                        type: integer
                      total:
                        type: integer
    post:
      summary: Create a new comment
      tags:
        - Comments
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
      responses:
        "201":
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "404":
          description: News not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundError"
        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitError"

  /api/comments/{id}:
    get:
      summary: Get a specific comment
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          description: Comment ID
          schema:
            type: integer
      responses:
        "200":
          description: Comment details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "404":
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundError"
    put:
      summary: Update a comment
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Comment ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
      responses:
        "200":
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedError"
        "404":
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundError"
        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitError"
    delete:
      summary: Delete a comment
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Comment ID
          schema:
            type: integer
      responses:
        "200":
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedError"
        "404":
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
        - device_name
      properties:
        email:
          type: string
          format: email
          example: test@example.com
        password:
          type: string
          format: password
          example: 123456
        device_name:
          type: string
          example: device_name

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJ0eXAiOiJKV1QiLCJhbGciOi...

    UserProfile:
      type: object
      properties:
        id:
          type: integer
          example: 11
        name:
          type: string
          example: "Test User"
        email:
          type: string
          format: email
          example: "test@example.com"
        email_verified_at:
          type: string
          format: date-time
          nullable: true
          example: null
        created_at:
          type: string
          format: date-time
          example: "2025-04-25T22:08:01.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-04-25T22:08:01.000000Z"

    News:
      type: object
      properties:
        id:
          type: integer
          example: 2
        title:
          type: string
          example: "Ab alias eveniet ut nemo maxime."
        description:
          type: string
          example: "Quidem facilis sunt et earum autem quibusdam nulla. Debitis neque veritatis quaerat itaque qui quasi."
        is_new:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2025-04-25T22:00:02.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-04-25T22:00:02.000000Z"
        user:
          $ref: "#/components/schemas/User"

    Comment:
      type: object
      properties:
        id:
          type: integer
          example: 29
        user_id:
          type: integer
          example: 11
        news_id:
          type: integer
          example: 1
        body:
          type: string
          example: "This is a new comment"
        created_at:
          type: string
          format: date-time
          example: "2025-04-26T17:15:24.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-04-26T17:15:24.000000Z"
        user:
          $ref: "#/components/schemas/User"
        news:
          $ref: "#/components/schemas/News"

    CommentRequest:
      type: object
      required:
        - body
        - news_id
      properties:
        body:
          type: string
          example: "This is a new comment"
        news_id:
          type: integer
          example: 1

    User:
      type: object
      properties:
        id:
          type: integer
          example: 11
        name:
          type: string
          example: "Test User"
        email:
          type: string
          format: email
          example: "test@example.com"
        created_at:
          type: string
          format: date-time
          example: "2025-04-25T22:08:01.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-04-25T22:08:01.000000Z"

    PaginationLinks:
      type: object
      properties:
        first:
          type: string
          example: "http://localhost:8000/api/news?page=1"
        last:
          type: string
          example: "http://localhost:8000/api/news?page=1"
        prev:
          type: string
          nullable: true
          example: null
        next:
          type: string
          nullable: true
          example: null

    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        from:
          type: integer
          example: 1
        last_page:
          type: integer
          example: 1
        links:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                nullable: true
                example: null
              label:
                type: string
                example: "&laquo; Previous"
              active:
                type: boolean
                example: false
        path:
          type: string
          example: "http://localhost:8000/api/news"
        per_page:
          type: integer
          example: 5
        to:
          type: integer
          example: 5
        total:
          type: integer
          example: 5

    PaginatedNewsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/News"
        links:
          $ref: "#/components/schemas/PaginationLinks"
        meta:
          $ref: "#/components/schemas/PaginationMeta"

    AuthenticationError:
      type: object
      properties:
        message:
          type: string
          example: "Unauthenticated."
        error:
          type: string
          example: "Authentication required"

    ResourceNotFoundError:
      type: object
      properties:
        message:
          type: string
          example: "Resource not found."

    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: "The body field is required. (and 1 more error)"
        errors:
          type: object
          properties:
            body:
              type: array
              items:
                type: string
              example: ["The body field is required."]
            news_id:
              type: array
              items:
                type: string
              example: ["The news id field is required."]

    CommentResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Comment"

    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          example: "Comment deleted successfully"

    AccessDeniedError:
      type: object
      properties:
        message:
          type: string
          example: "Access denied."

    RateLimitError:
      type: object
      properties:
        message:
          type: string
          example: "Too many requests. Please try again later."
